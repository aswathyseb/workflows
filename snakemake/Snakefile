configfile: "params.yaml"

#REF = "refs/idx/genome.fa"
REF = config["ref"]

rule all:
    input:
        "calls/all.vcf"


def get_bwa_map_input_fastqs(wildcards):
    return config["samples"][wildcards.sample1]


rule bwa_map:
    input:
        REF,
        get_bwa_map_input_fastqs
    output:
        temp("mapped_reads/{sample1}.bam")
    params:
        rg=r"@RG\tID:{sample1}\tSM:{sample1}"
    log:
        "logs/bwa_mem/{sample1}.log"
    threads: 8
    shell:
        "(bwa mem -R '{params.rg}' -t {threads} {input} | "
        "samtools view -Sb - > {output}) 2> {log}"


rule samtools_sort:
    input:
        "mapped_reads/{sample1}.bam"
    output:
        protected("sorted_reads/{sample1}.bam")
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample1} "
        "-O bam {input} > {output}"


rule samtools_index:
    input:
        "sorted_reads/{sample1}.bam"
    output:
        "sorted_reads/{sample1}.bam.bai"
    shell:
        "samtools index {input}"


rule bcftools_call:
    input:
        fa=REF,
        bam=expand("sorted_reads/{sample1}.bam", sample1=config["samples"]),
        bai=expand("sorted_reads/{sample1}.bam.bai", sample1=config["samples"])
    output:
        "calls/all.vcf"
    params:
        flags=config["vcf"]["call_flags"]
    log:
        "logs/bcftools_call/all.log"
    shell:
        "(bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv  {params.flags} - > {output}) 2> {log}"




